Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = require("./Sequence");
var ZipIterator = (function () {
    function ZipIterator(iterator1, iterator2) {
        this.iterator1 = iterator1;
        this.iterator2 = iterator2;
    }
    ZipIterator.prototype.hasNext = function () {
        return this.iterator1.hasNext() && this.iterator2.hasNext();
    };
    ZipIterator.prototype.next = function () {
        var item1 = this.iterator1.next();
        var item2 = this.iterator2.next();
        return [item1, item2];
    };
    return ZipIterator;
}());
/**
 * Returns a new sequence consisting of pairs built the elements of both sequences
 * with the same index. The resulting sequence has the length of the shortest input
 * sequence. All other elements are discarded.
 *
 * @param {Sequence<S>} other
 * @returns {Sequence<[T , S]>}
 */
function zip(other) {
    return new Sequence_1.default(new ZipIterator(this.iterator, other.iterator));
}
exports.default = zip;
//# sourceMappingURL=zip.js.map