import SequenceIterator from "./SequenceIterator";
import map from "./map";
import filter from "./filter";
import flatMap from "./flatMap";
import firstOrNull from "./firstOrNull";
import first from "./first";
import lastOrNull from "./lastOrNull";
import onEach from "./onEach";
import forEach from "./forEach";
import toArray from "./toArray";
import last from "./last";
import all from "./all";
import any from "./any";
import none from "./none";
import count from "./count";
import distinct from "./distinct";
import contains from "./contains";
import indexOf from "./indexOf";
import elementAt from "./elementAt";
import elementAtOrNull from "./elementAtOrNull";
import elementAtOrElse from "./elementAtOrElse";
import indexOfFirst from "./indexOfFirst";
import indexOfLast from "./indexOfLast";
import joinToString from "./joinToString";
import mapIndexed from "./mapIndexed";
import withIndex from "./withIndex";
import filterIndexed from "./filterIndexed";
import forEachIndexed from "./forEachIndexed";
import distinctBy from "./distinctBy";
import drop from "./drop";
import take from "./take";
import single from "./single";
import singleOrNull from "./singleOrNull";
import filterNot from "./filterNot";
import associate from "./associate";
import associateBy from "./associateBy";
import groupBy from "./groupBy";
import reduce from "./reduce";
import reduceIndexed from "./reduceIndexed";
import fold from "./fold";
import foldIndexed from "./foldIndexed";
import flatten from "./flatten";
import sorted from "./sorted";
import sortedBy from "./sortedBy";
import sortedDescending from "./sortedDescending";
import sortedByDescending from "./sortedByDescending";
import sortedWith from "./sortedWith";
import filterNotNull from "./filterNotNull";
import mapNotNull from "./mapNotNull";
import plus from "./plus";
import minus from "./minus";
import zip from "./zip";
import unzip from "./unzip";
import partition from "./partition";
import toSet from "./toSet";
import toMap from "./toMap";
import sum from "./sum";
import sumBy from "./sumBy";
import chunk from "./chunk";
import reverse from "./reverse";
import average from "./average";
import max from "./max";
import maxBy from "./maxBy";
import min from "./min";
import minBy from "./minBy";
import maxWith from "./maxWith";
import minWith from "./minWith";
/**
 * A Sequence accepts an iterator and provides a fluent functional API consisting
 * of various intermediate and terminal operations for processing the iterated data.
 * The operations are evaluated lazily to avoid examining all of the input data
 * when it's not necessary. Sequences can be iterated only once.
 */
export default class Sequence<T> {
    readonly iterator: SequenceIterator<T>;
    constructor(iterator: SequenceIterator<T>);
    map: typeof map;
    mapNotNull: typeof mapNotNull;
    mapIndexed: typeof mapIndexed;
    filter: typeof filter;
    filterNot: typeof filterNot;
    filterNotNull: typeof filterNotNull;
    filterIndexed: typeof filterIndexed;
    flatMap: typeof flatMap;
    distinct: typeof distinct;
    distinctBy: typeof distinctBy;
    withIndex: typeof withIndex;
    drop: typeof drop;
    take: typeof take;
    onEach: typeof onEach;
    flatten: typeof flatten;
    sorted: typeof sorted;
    sortedDescending: typeof sortedDescending;
    sortedBy: typeof sortedBy;
    sortedByDescending: typeof sortedByDescending;
    sortedWith: typeof sortedWith;
    reverse: typeof reverse;
    forEach: typeof forEach;
    forEachIndexed: typeof forEachIndexed;
    toArray: typeof toArray;
    toList: typeof toArray;
    toSet: typeof toSet;
    toMap: typeof toMap;
    first: typeof first;
    firstOrNull: typeof firstOrNull;
    last: typeof last;
    lastOrNull: typeof lastOrNull;
    find: typeof firstOrNull;
    findLast: typeof lastOrNull;
    all: typeof all;
    any: typeof any;
    none: typeof none;
    count: typeof count;
    contains: typeof contains;
    indexOf: typeof indexOf;
    indexOfFirst: typeof indexOfFirst;
    indexOfLast: typeof indexOfLast;
    elementAt: typeof elementAt;
    elementAtOrNull: typeof elementAtOrNull;
    elementAtOrElse: typeof elementAtOrElse;
    joinTo: typeof joinToString;
    joinToString: typeof joinToString;
    single: typeof single;
    singleOrNull: typeof singleOrNull;
    associate: typeof associate;
    associateBy: typeof associateBy;
    groupBy: typeof groupBy;
    reduce: typeof reduce;
    reduceIndexed: typeof reduceIndexed;
    fold: typeof fold;
    foldIndexed: typeof foldIndexed;
    partition: typeof partition;
    chunk: typeof chunk;
    plus: typeof plus;
    minus: typeof minus;
    zip: typeof zip;
    unzip: typeof unzip;
    sum: typeof sum;
    sumBy: typeof sumBy;
    average: typeof average;
    max: typeof max;
    maxBy: typeof maxBy;
    maxWith: typeof maxWith;
    min: typeof min;
    minBy: typeof minBy;
    minWith: typeof minWith;
}
export declare function sequenceOf<T>(...args: Array<T>): Sequence<T>;
export declare function emptySequence<T>(): Sequence<T>;
export declare function asSequence<T>(iterable: Iterable<T>): Sequence<T>;
