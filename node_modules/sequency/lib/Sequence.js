Object.defineProperty(exports, "__esModule", { value: true });
var SequenceIterator_1 = require("./SequenceIterator");
var map_1 = require("./map");
var filter_1 = require("./filter");
var flatMap_1 = require("./flatMap");
var firstOrNull_1 = require("./firstOrNull");
var first_1 = require("./first");
var lastOrNull_1 = require("./lastOrNull");
var onEach_1 = require("./onEach");
var forEach_1 = require("./forEach");
var toArray_1 = require("./toArray");
var last_1 = require("./last");
var all_1 = require("./all");
var any_1 = require("./any");
var none_1 = require("./none");
var count_1 = require("./count");
var distinct_1 = require("./distinct");
var contains_1 = require("./contains");
var indexOf_1 = require("./indexOf");
var elementAt_1 = require("./elementAt");
var elementAtOrNull_1 = require("./elementAtOrNull");
var elementAtOrElse_1 = require("./elementAtOrElse");
var indexOfFirst_1 = require("./indexOfFirst");
var indexOfLast_1 = require("./indexOfLast");
var joinToString_1 = require("./joinToString");
var mapIndexed_1 = require("./mapIndexed");
var withIndex_1 = require("./withIndex");
var filterIndexed_1 = require("./filterIndexed");
var forEachIndexed_1 = require("./forEachIndexed");
var distinctBy_1 = require("./distinctBy");
var drop_1 = require("./drop");
var take_1 = require("./take");
var single_1 = require("./single");
var singleOrNull_1 = require("./singleOrNull");
var filterNot_1 = require("./filterNot");
var associate_1 = require("./associate");
var associateBy_1 = require("./associateBy");
var groupBy_1 = require("./groupBy");
var reduce_1 = require("./reduce");
var reduceIndexed_1 = require("./reduceIndexed");
var fold_1 = require("./fold");
var foldIndexed_1 = require("./foldIndexed");
var flatten_1 = require("./flatten");
var sorted_1 = require("./sorted");
var sortedBy_1 = require("./sortedBy");
var sortedDescending_1 = require("./sortedDescending");
var sortedByDescending_1 = require("./sortedByDescending");
var sortedWith_1 = require("./sortedWith");
var filterNotNull_1 = require("./filterNotNull");
var mapNotNull_1 = require("./mapNotNull");
var plus_1 = require("./plus");
var minus_1 = require("./minus");
var zip_1 = require("./zip");
var unzip_1 = require("./unzip");
var partition_1 = require("./partition");
var toSet_1 = require("./toSet");
var toMap_1 = require("./toMap");
var sum_1 = require("./sum");
var sumBy_1 = require("./sumBy");
var chunk_1 = require("./chunk");
var reverse_1 = require("./reverse");
var average_1 = require("./average");
var max_1 = require("./max");
var maxBy_1 = require("./maxBy");
var min_1 = require("./min");
var minBy_1 = require("./minBy");
var maxWith_1 = require("./maxWith");
var minWith_1 = require("./minWith");
/**
 * A Sequence accepts an iterator and provides a fluent functional API consisting
 * of various intermediate and terminal operations for processing the iterated data.
 * The operations are evaluated lazily to avoid examining all of the input data
 * when it's not necessary. Sequences can be iterated only once.
 */
var Sequence = (function () {
    function Sequence(iterator) {
        this.iterator = iterator;
        this.map = map_1.default;
        this.mapNotNull = mapNotNull_1.default;
        this.mapIndexed = mapIndexed_1.default;
        this.filter = filter_1.default;
        this.filterNot = filterNot_1.default;
        this.filterNotNull = filterNotNull_1.default;
        this.filterIndexed = filterIndexed_1.default;
        this.flatMap = flatMap_1.default;
        this.distinct = distinct_1.default;
        this.distinctBy = distinctBy_1.default;
        this.withIndex = withIndex_1.default;
        this.drop = drop_1.default;
        this.take = take_1.default;
        this.onEach = onEach_1.default;
        this.flatten = flatten_1.default;
        this.sorted = sorted_1.default;
        this.sortedDescending = sortedDescending_1.default;
        this.sortedBy = sortedBy_1.default;
        this.sortedByDescending = sortedByDescending_1.default;
        this.sortedWith = sortedWith_1.default;
        this.reverse = reverse_1.default;
        this.forEach = forEach_1.default;
        this.forEachIndexed = forEachIndexed_1.default;
        this.toArray = toArray_1.default;
        this.toList = toArray_1.default;
        this.toSet = toSet_1.default;
        this.toMap = toMap_1.default;
        this.first = first_1.default;
        this.firstOrNull = firstOrNull_1.default;
        this.last = last_1.default;
        this.lastOrNull = lastOrNull_1.default;
        this.find = firstOrNull_1.default;
        this.findLast = lastOrNull_1.default;
        this.all = all_1.default;
        this.any = any_1.default;
        this.none = none_1.default;
        this.count = count_1.default;
        this.contains = contains_1.default;
        this.indexOf = indexOf_1.default;
        this.indexOfFirst = indexOfFirst_1.default;
        this.indexOfLast = indexOfLast_1.default;
        this.elementAt = elementAt_1.default;
        this.elementAtOrNull = elementAtOrNull_1.default;
        this.elementAtOrElse = elementAtOrElse_1.default;
        this.joinTo = joinToString_1.default;
        this.joinToString = joinToString_1.default;
        this.single = single_1.default;
        this.singleOrNull = singleOrNull_1.default;
        this.associate = associate_1.default;
        this.associateBy = associateBy_1.default;
        this.groupBy = groupBy_1.default;
        this.reduce = reduce_1.default;
        this.reduceIndexed = reduceIndexed_1.default;
        this.fold = fold_1.default;
        this.foldIndexed = foldIndexed_1.default;
        this.partition = partition_1.default;
        this.chunk = chunk_1.default;
        this.plus = plus_1.default;
        this.minus = minus_1.default;
        this.zip = zip_1.default;
        this.unzip = unzip_1.default;
        this.sum = sum_1.default;
        this.sumBy = sumBy_1.default;
        this.average = average_1.default;
        this.max = max_1.default;
        this.maxBy = maxBy_1.default;
        this.maxWith = maxWith_1.default;
        this.min = min_1.default;
        this.minBy = minBy_1.default;
        this.minWith = minWith_1.default;
    }
    return Sequence;
}());
exports.default = Sequence;
function sequenceOf() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return asSequence(args);
}
exports.sequenceOf = sequenceOf;
function emptySequence() {
    return asSequence([]);
}
exports.emptySequence = emptySequence;
function asSequence(iterable) {
    return new Sequence(new SequenceIterator_1.IterableIterator(iterable));
}
exports.asSequence = asSequence;
//# sourceMappingURL=Sequence.js.map