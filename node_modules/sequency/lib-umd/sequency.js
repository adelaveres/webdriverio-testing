(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Sequency", [], factory);
	else if(typeof exports === 'object')
		exports["Sequency"] = factory();
	else
		root["Sequency"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var SequenceIterator_1 = __webpack_require__(1);
var map_1 = __webpack_require__(2);
var filter_1 = __webpack_require__(3);
var flatMap_1 = __webpack_require__(4);
var firstOrNull_1 = __webpack_require__(5);
var first_1 = __webpack_require__(6);
var lastOrNull_1 = __webpack_require__(7);
var onEach_1 = __webpack_require__(8);
var forEach_1 = __webpack_require__(9);
var toArray_1 = __webpack_require__(10);
var last_1 = __webpack_require__(11);
var all_1 = __webpack_require__(12);
var any_1 = __webpack_require__(13);
var none_1 = __webpack_require__(14);
var count_1 = __webpack_require__(15);
var distinct_1 = __webpack_require__(16);
var contains_1 = __webpack_require__(17);
var indexOf_1 = __webpack_require__(18);
var elementAt_1 = __webpack_require__(19);
var elementAtOrNull_1 = __webpack_require__(20);
var elementAtOrElse_1 = __webpack_require__(21);
var indexOfFirst_1 = __webpack_require__(22);
var indexOfLast_1 = __webpack_require__(23);
var joinToString_1 = __webpack_require__(24);
var mapIndexed_1 = __webpack_require__(25);
var withIndex_1 = __webpack_require__(26);
var filterIndexed_1 = __webpack_require__(27);
var forEachIndexed_1 = __webpack_require__(28);
var distinctBy_1 = __webpack_require__(29);
var drop_1 = __webpack_require__(30);
var take_1 = __webpack_require__(31);
var single_1 = __webpack_require__(32);
var singleOrNull_1 = __webpack_require__(33);
var filterNot_1 = __webpack_require__(34);
var associate_1 = __webpack_require__(35);
var associateBy_1 = __webpack_require__(36);
var groupBy_1 = __webpack_require__(37);
var reduce_1 = __webpack_require__(38);
var reduceIndexed_1 = __webpack_require__(39);
var fold_1 = __webpack_require__(40);
var foldIndexed_1 = __webpack_require__(41);
var flatten_1 = __webpack_require__(42);
var sorted_1 = __webpack_require__(43);
var sortedBy_1 = __webpack_require__(44);
var sortedDescending_1 = __webpack_require__(45);
var sortedByDescending_1 = __webpack_require__(46);
var sortedWith_1 = __webpack_require__(47);
var filterNotNull_1 = __webpack_require__(48);
var mapNotNull_1 = __webpack_require__(49);
var plus_1 = __webpack_require__(50);
var minus_1 = __webpack_require__(51);
var zip_1 = __webpack_require__(52);
var unzip_1 = __webpack_require__(53);
var partition_1 = __webpack_require__(54);
var toSet_1 = __webpack_require__(55);
var toMap_1 = __webpack_require__(56);
var sum_1 = __webpack_require__(57);
var sumBy_1 = __webpack_require__(58);
var chunk_1 = __webpack_require__(59);
var reverse_1 = __webpack_require__(60);
var average_1 = __webpack_require__(61);
var max_1 = __webpack_require__(62);
var maxBy_1 = __webpack_require__(63);
var min_1 = __webpack_require__(64);
var minBy_1 = __webpack_require__(65);
var maxWith_1 = __webpack_require__(66);
var minWith_1 = __webpack_require__(67);
/**
 * A Sequence accepts an iterator and provides a fluent functional API consisting
 * of various intermediate and terminal operations for processing the iterated data.
 * The operations are evaluated lazily to avoid examining all of the input data
 * when it's not necessary. Sequences can be iterated only once.
 */
var Sequence = /** @class */ (function () {
    function Sequence(iterator) {
        this.iterator = iterator;
        this.map = map_1.default;
        this.mapNotNull = mapNotNull_1.default;
        this.mapIndexed = mapIndexed_1.default;
        this.filter = filter_1.default;
        this.filterNot = filterNot_1.default;
        this.filterNotNull = filterNotNull_1.default;
        this.filterIndexed = filterIndexed_1.default;
        this.flatMap = flatMap_1.default;
        this.distinct = distinct_1.default;
        this.distinctBy = distinctBy_1.default;
        this.withIndex = withIndex_1.default;
        this.drop = drop_1.default;
        this.take = take_1.default;
        this.onEach = onEach_1.default;
        this.flatten = flatten_1.default;
        this.sorted = sorted_1.default;
        this.sortedDescending = sortedDescending_1.default;
        this.sortedBy = sortedBy_1.default;
        this.sortedByDescending = sortedByDescending_1.default;
        this.sortedWith = sortedWith_1.default;
        this.reverse = reverse_1.default;
        this.forEach = forEach_1.default;
        this.forEachIndexed = forEachIndexed_1.default;
        this.toArray = toArray_1.default;
        this.toList = toArray_1.default;
        this.toSet = toSet_1.default;
        this.toMap = toMap_1.default;
        this.first = first_1.default;
        this.firstOrNull = firstOrNull_1.default;
        this.last = last_1.default;
        this.lastOrNull = lastOrNull_1.default;
        this.find = firstOrNull_1.default;
        this.findLast = lastOrNull_1.default;
        this.all = all_1.default;
        this.any = any_1.default;
        this.none = none_1.default;
        this.count = count_1.default;
        this.contains = contains_1.default;
        this.indexOf = indexOf_1.default;
        this.indexOfFirst = indexOfFirst_1.default;
        this.indexOfLast = indexOfLast_1.default;
        this.elementAt = elementAt_1.default;
        this.elementAtOrNull = elementAtOrNull_1.default;
        this.elementAtOrElse = elementAtOrElse_1.default;
        this.joinTo = joinToString_1.default;
        this.joinToString = joinToString_1.default;
        this.single = single_1.default;
        this.singleOrNull = singleOrNull_1.default;
        this.associate = associate_1.default;
        this.associateBy = associateBy_1.default;
        this.groupBy = groupBy_1.default;
        this.reduce = reduce_1.default;
        this.reduceIndexed = reduceIndexed_1.default;
        this.fold = fold_1.default;
        this.foldIndexed = foldIndexed_1.default;
        this.partition = partition_1.default;
        this.chunk = chunk_1.default;
        this.plus = plus_1.default;
        this.minus = minus_1.default;
        this.zip = zip_1.default;
        this.unzip = unzip_1.default;
        this.sum = sum_1.default;
        this.sumBy = sumBy_1.default;
        this.average = average_1.default;
        this.max = max_1.default;
        this.maxBy = maxBy_1.default;
        this.maxWith = maxWith_1.default;
        this.min = min_1.default;
        this.minBy = minBy_1.default;
        this.minWith = minWith_1.default;
    }
    return Sequence;
}());
exports.default = Sequence;
function sequenceOf() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return asSequence(args);
}
exports.sequenceOf = sequenceOf;
function emptySequence() {
    return asSequence([]);
}
exports.emptySequence = emptySequence;
function asSequence(iterable) {
    return new Sequence(new SequenceIterator_1.IterableIterator(iterable));
}
exports.asSequence = asSequence;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var IterableIterator = /** @class */ (function () {
    function IterableIterator(iterable) {
        this.done = false;
        this.iterator = iterable[Symbol.iterator]();
    }
    IterableIterator.prototype.hasNext = function () {
        this.processNext();
        return !this.done;
    };
    IterableIterator.prototype.next = function () {
        this.processNext();
        var result = this.nextItem;
        this.nextItem = undefined;
        return result;
    };
    IterableIterator.prototype.processNext = function () {
        if (this.done || this.nextItem !== undefined) {
            return;
        }
        var _a = this.iterator.next(), done = _a.done, value = _a.value;
        if (done) {
            this.done = done;
            this.nextItem = undefined;
        }
        else {
            this.nextItem = value;
        }
    };
    return IterableIterator;
}());
exports.IterableIterator = IterableIterator;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var MapIterator = /** @class */ (function () {
    function MapIterator(transform, iterator) {
        this.transform = transform;
        this.iterator = iterator;
    }
    MapIterator.prototype.hasNext = function () {
        return this.iterator.hasNext();
    };
    MapIterator.prototype.next = function () {
        var item = this.iterator.next();
        return this.transform(item);
    };
    return MapIterator;
}());
/**
 * Transforms each element into another value by applying the given `transform` function and returns a new sequence.
 *
 * @param {(T) => S} transform
 * @returns {Sequence<S>}
 */
function map(transform) {
    return new Sequence_1.default(new MapIterator(transform, this.iterator));
}
exports.default = map;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var FilterIterator = /** @class */ (function () {
    function FilterIterator(predicate, iterator) {
        this.predicate = predicate;
        this.iterator = iterator;
        this.done = false;
    }
    FilterIterator.prototype.hasNext = function () {
        this.processNext();
        return !this.done;
    };
    FilterIterator.prototype.next = function () {
        this.processNext();
        var result = this.nextItem;
        this.nextItem = undefined;
        return result;
    };
    FilterIterator.prototype.processNext = function () {
        if (this.done || this.nextItem !== undefined) {
            return;
        }
        while (this.iterator.hasNext()) {
            var item = this.iterator.next();
            if (this.predicate(item)) {
                this.nextItem = item;
                return;
            }
        }
        this.done = true;
    };
    return FilterIterator;
}());
/**
 * Returns a new sequence consisting of all elements that match the given `predicate`.
 *
 * @param {(T) => boolean} predicate
 * @returns {Sequence<T>}
 */
function filter(predicate) {
    return new Sequence_1.default(new FilterIterator(predicate, this.iterator));
}
exports.default = filter;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var FlatMapIterator = /** @class */ (function () {
    function FlatMapIterator(transform, iterator) {
        this.transform = transform;
        this.iterator = iterator;
    }
    FlatMapIterator.prototype.next = function () {
        this.processNext();
        return this.current.next();
    };
    FlatMapIterator.prototype.hasNext = function () {
        this.processNext();
        return this.current != null;
    };
    FlatMapIterator.prototype.processNext = function () {
        if (this.current != null) {
            if (this.current.hasNext()) {
                return;
            }
            else {
                this.current = undefined;
            }
        }
        while (this.current == null && this.iterator.hasNext()) {
            var element = this.iterator.next();
            var sequence = this.transform(element);
            if (sequence.iterator.hasNext()) {
                this.current = sequence.iterator;
            }
        }
    };
    return FlatMapIterator;
}());
/**
 * Transforms each element into a sequence of items and returns a flat single sequence of all those items.
 *
 * @param {(value: S) => Sequence<T>} transform
 * @returns {Sequence<T>}
 */
function flatMap(transform) {
    return new Sequence_1.default(new FlatMapIterator(transform, this.iterator));
}
exports.default = flatMap;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the first element of the sequence or the first element matching `predicate` if present, otherwise returns `null`.
 *
 * @param {(T) => boolean} predicate
 * @returns {T}
 */
function firstOrNull(predicate) {
    if (predicate != null) {
        return this.filter(predicate).firstOrNull();
    }
    return this.iterator.hasNext()
        ? this.iterator.next()
        : null;
}
exports.default = firstOrNull;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the first element of the sequence or the first element matching `predicate` if present, otherwise throws
 * an error.
 *
 * @param {(T) => boolean} predicate
 * @returns {T}
 */
function first(predicate) {
    if (predicate != null) {
        return this.filter(predicate).first();
    }
    if (!this.iterator.hasNext()) {
        throw new Error("No such element");
    }
    return this.iterator.next();
}
exports.default = first;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the last element of the sequence or the last element matching `predicate` if present, otherwise returns `null`.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {T}
 */
function lastOrNull(predicate) {
    if (predicate != null) {
        return this.filter(predicate).lastOrNull();
    }
    var item = null;
    while (this.iterator.hasNext()) {
        item = this.iterator.next();
    }
    return item;
}
exports.default = lastOrNull;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Performs the given `action` for each element and returns the sequence.
 *
 * @param {(value: T) => void} action
 * @returns {Sequence<T>}
 */
function onEach(action) {
    return this.map(function (it) {
        action(it);
        return it;
    });
}
exports.default = onEach;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Performs the given `action` (side-effect) for each element of the sequence.
 *
 * @param {(T) => void} action
 */
function forEach(action) {
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        action(item);
    }
}
exports.default = forEach;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns all elements of the sequence as array. If an `array` is passed
 * the elements are appended to the end of the array.
 *
 * @param {Array<T>} array
 * @returns {Array<T>}
 */
function toArray(array) {
    var result = array || [];
    while (this.iterator.hasNext()) {
        result.push(this.iterator.next());
    }
    return result;
}
exports.default = toArray;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the last element of the sequence or the last element matching `predicate` if present, otherwise throws
 * an error.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {T}
 */
function last(predicate) {
    if (predicate != null) {
        return this.filter(predicate).last();
    }
    if (!this.iterator.hasNext()) {
        throw new Error("No such element");
    }
    var item;
    while (this.iterator.hasNext()) {
        item = this.iterator.next();
    }
    return item;
}
exports.default = last;


/***/ }),
/* 12 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns `true` if all elements match the given `predicate`.
 *
 * @param {(T) => boolean} predicate
 * @returns {boolean}
 */
function all(predicate) {
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (!predicate(item)) {
            return false;
        }
    }
    return true;
}
exports.default = all;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns `true` if at least one element match the given `predicate`.
 *
 * @param {(T) => boolean} predicate
 * @returns {boolean}
 */
function any(predicate) {
    if (predicate == null) {
        return this.iterator.hasNext();
    }
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (predicate(item)) {
            return true;
        }
    }
    return false;
}
exports.default = any;


/***/ }),
/* 14 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns `true` if no element match the given `predicate` or if the sequence is empty
 * if no predicate is present.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {boolean}
 */
function none(predicate) {
    if (predicate == null) {
        return !this.iterator.hasNext();
    }
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (predicate(item)) {
            return false;
        }
    }
    return true;
}
exports.default = none;


/***/ }),
/* 15 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the number of elements of this sequence. If `predicate` is present, returns
 * the number of elements matching the given `predicate`.
 *
 * @param {(T) => boolean} predicate
 * @returns {number}
 */
function count(predicate) {
    var num = 0;
    if (predicate == null) {
        while (this.iterator.hasNext()) {
            this.iterator.next();
            num++;
        }
    }
    else {
        while (this.iterator.hasNext()) {
            var item = this.iterator.next();
            if (predicate(item)) {
                num++;
            }
        }
    }
    return num;
}
exports.default = count;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var DistinctIterator = /** @class */ (function () {
    function DistinctIterator(iterator) {
        this.iterator = iterator;
        this.items = [];
        this.nextItem = undefined;
        this.done = false;
    }
    DistinctIterator.prototype.hasNext = function () {
        this.processNext();
        return !this.done;
    };
    DistinctIterator.prototype.next = function () {
        this.processNext();
        var result = this.nextItem;
        this.nextItem = undefined;
        return result;
    };
    DistinctIterator.prototype.processNext = function () {
        if (this.nextItem !== undefined || this.done) {
            return;
        }
        while (this.iterator.hasNext()) {
            var item = this.iterator.next();
            if (this.items.indexOf(item) < 0) {
                this.nextItem = item;
                this.items.push(item);
                return;
            }
        }
        this.done = true;
    };
    return DistinctIterator;
}());
/**
 * Returns a new sequence which discards all duplicate elements.
 *
 * @returns {Sequence<T>}
 */
function distinct() {
    return new Sequence_1.default(new DistinctIterator(this.iterator));
}
exports.default = distinct;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns `true` if the sequence contains the given `element`.
 *
 * @param {T} element
 * @returns {boolean}
 */
function contains(element) {
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (element === item) {
            return true;
        }
    }
    return false;
}
exports.default = contains;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the zero-based index of the given `element` or -1 if the sequence does not contain the element.
 *
 * @param {T} element
 * @returns {number}
 */
function indexOf(element) {
    var index = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (item === element) {
            return index;
        }
        index++;
    }
    return -1;
}
exports.default = indexOf;


/***/ }),
/* 19 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the element at position `index` (zero-based) or throws an error if `index`
 * is out of bounds.
 *
 * @param {number} index
 * @returns {T}
 */
function elementAt(index) {
    var i = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (i === index) {
            return item;
        }
        i++;
    }
    throw new Error("Index out of bounds: " + index);
}
exports.default = elementAt;


/***/ }),
/* 20 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the element at position `index` (zero-based) or `null` if `index`
 * is out of bounds.
 *
 * @param {number} index
 * @returns {T}
 */
function elementAtOrNull(index) {
    var i = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (i === index) {
            return item;
        }
        i++;
    }
    return null;
}
exports.default = elementAtOrNull;


/***/ }),
/* 21 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the element at position `index` (zero-based). If `index` is out of bounds returns
 * the result of the given `defaultValue` function.
 *
 * @param {number} index
 * @param defaultValue
 * @returns {T}
 */
function elementAtOrElse(index, defaultValue) {
    var i = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (i === index) {
            return item;
        }
        i++;
    }
    return defaultValue(index);
}
exports.default = elementAtOrElse;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the zero-based index of the first element matching the given `predicate` or -1 if no element matches
 * the predicate.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {number}
 */
function indexOfFirst(predicate) {
    var index = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (predicate(item)) {
            return index;
        }
        index++;
    }
    return -1;
}
exports.default = indexOfFirst;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the zero-based index of the last element matching the given `predicate` or -1 if no element matches
 * the predicate.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {number}
 */
function indexOfLast(predicate) {
    var index = 0;
    var result = -1;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (predicate(item)) {
            result = index;
        }
        index++;
    }
    return result;
}
exports.default = indexOfLast;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var defaults = {
    value: "",
    separator: ", ",
    prefix: "",
    postfix: "",
    limit: -1,
    truncated: "...",
    transform: undefined
};
/**
 * Joins all elements of the sequence into a string with the given configuration.
 *
 * @param {JoinConfig<T>} config
 * @returns {string}
 */
function joinToString(config) {
    if (config === void 0) { config = defaults; }
    var _a = config.value, value = _a === void 0 ? defaults.value : _a, _b = config.separator, separator = _b === void 0 ? defaults.separator : _b, _c = config.prefix, prefix = _c === void 0 ? defaults.prefix : _c, _d = config.postfix, postfix = _d === void 0 ? defaults.postfix : _d, _e = config.limit, limit = _e === void 0 ? defaults.limit : _e, _f = config.truncated, truncated = _f === void 0 ? defaults.truncated : _f, _g = config.transform, transform = _g === void 0 ? defaults.transform : _g;
    var result = "" + value + prefix;
    var count = 0;
    while (this.iterator.hasNext()) {
        count++;
        var item = this.iterator.next();
        if (count > 1) {
            result += separator;
        }
        if (limit < 0 || count <= limit) {
            result += transform != null
                ? transform(item)
                : String(item);
        }
        else {
            break;
        }
    }
    if (limit >= 0 && count > limit) {
        result += truncated;
    }
    result += postfix;
    return result;
}
exports.default = joinToString;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Transforms each element into another value by applying the given `transform` function and returns a new sequence.
 *
 * @param {(index: number, value: T) => R} transform
 * @returns {Sequence<R>}
 */
function mapIndexed(transform) {
    return this.withIndex()
        .map(function (it) { return transform(it.index, it.value); });
}
exports.default = mapIndexed;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var IndexIterator = /** @class */ (function () {
    function IndexIterator(iterator) {
        this.iterator = iterator;
        this.index = -1;
    }
    IndexIterator.prototype.hasNext = function () {
        return this.iterator.hasNext();
    };
    IndexIterator.prototype.next = function () {
        var value = this.iterator.next();
        this.index++;
        return { index: this.index, value: value };
    };
    return IndexIterator;
}());
/**
 * Returns a new sequence consisting of indexed values for all original elements.
 *
 * @returns {Sequence<IndexedValue<T>>}
 */
function withIndex() {
    return new Sequence_1.default(new IndexIterator(this.iterator));
}
exports.default = withIndex;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a new sequence consisting of all elements that match the given `predicate`.
 *
 * @param {(index: number, value: T) => boolean} predicate
 * @returns {Sequence<T>}
 */
function filterIndexed(predicate) {
    return this.withIndex()
        .filter(function (it) { return predicate(it.index, it.value); })
        .map(function (it) { return it.value; });
}
exports.default = filterIndexed;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Performs the given `action` (side-effect) for each element of the sequence and passes the `index` of the current
 * element (zero-based).
 *
 * @param {(index: number, value: T) => void} action
 */
function forEachIndexed(action) {
    this.withIndex()
        .forEach(function (it) { return action(it.index, it.value); });
}
exports.default = forEachIndexed;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var DistinctByIterator = /** @class */ (function () {
    function DistinctByIterator(iterator, selector) {
        this.iterator = iterator;
        this.selector = selector;
        this.keys = [];
        this.done = false;
    }
    DistinctByIterator.prototype.hasNext = function () {
        this.processNext();
        return !this.done;
    };
    DistinctByIterator.prototype.next = function () {
        this.processNext();
        var result = this.nextItem;
        this.nextItem = undefined;
        return result;
    };
    DistinctByIterator.prototype.processNext = function () {
        if (this.nextItem !== undefined || this.done) {
            return;
        }
        while (this.iterator.hasNext()) {
            var item = this.iterator.next();
            var key = this.selector(item);
            if (this.keys.indexOf(key) < 0) {
                this.nextItem = item;
                this.keys.push(key);
                return;
            }
        }
        this.done = true;
    };
    return DistinctByIterator;
}());
/**
 * Returns a new sequence which discards all elements with duplicate items determined
 * by the given `selector`.
 *
 * @param {(item: T) => K} selector
 * @returns {Sequence<T>}
 */
function distinctBy(selector) {
    return new Sequence_1.default(new DistinctByIterator(this.iterator, selector));
}
exports.default = distinctBy;


/***/ }),
/* 30 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a new sequence which discards the first `n` elements;
 *
 * @param {number} n
 * @returns {Sequence<T>}
 */
function drop(n) {
    return this.withIndex()
        .filterNot(function (it) { return it.index < n; })
        .map(function (it) { return it.value; });
}
exports.default = drop;


/***/ }),
/* 31 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a new sequence consisting of the first `n` elements. All other elements
 * are discarded.
 *
 * @param {number} n
 * @returns {Sequence<T>}
 */
function take(n) {
    return this.withIndex()
        .filter(function (it) { return it.index < n; })
        .map(function (it) { return it.value; });
}
exports.default = take;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the single element of the sequence or throws error if the sequence has more than
 * one element or none at all. If a `predicate` is passed returns the single element matching
 * the predicate or throws an error if more or less than one element match the predicate.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {T}
 */
function single(predicate) {
    if (predicate != null) {
        return this.filter(predicate).single();
    }
    if (!this.iterator.hasNext()) {
        throw new Error("No such element");
    }
    var item = this.iterator.next();
    if (this.iterator.hasNext()) {
        throw new Error("Expect single element");
    }
    return item;
}
exports.default = single;


/***/ }),
/* 33 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the single element of the sequence or `null` if the sequence has more than
 * one element or none at all. If a `predicate` is passed returns the single element matching
 * the predicate or `null` if more or less than one element match the predicate.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {T}
 */
function singleOrNull(predicate) {
    if (predicate != null) {
        return this.filter(predicate).singleOrNull();
    }
    if (!this.iterator.hasNext()) {
        return null;
    }
    var item = this.iterator.next();
    if (this.iterator.hasNext()) {
        return null;
    }
    return item;
}
exports.default = singleOrNull;


/***/ }),
/* 34 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a new sequence consisting of all elements that don't match the given `predicate`.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {Sequence<T>}
 */
function filterNot(predicate) {
    return this.filter(function (value) { return !predicate(value); });
}
exports.default = filterNot;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Transforms each element into a key-value pair and returns the results as map. In case of
 * duplicate keys the last key-value pair overrides the other.
 *
 * @param {(value: T) => [K , V]} transform
 * @returns {Map<K, V>}
 */
function associate(transform) {
    var result = new Map();
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        var pair = transform(item);
        result.set(pair[0], pair[1]);
    }
    return result;
}
exports.default = associate;


/***/ }),
/* 36 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a map consisting of the elements mapped by the given `keySelector`. The value
 * can optionally be transformed into another value by specifying a `valueTransformer`.
 *
 * @param {(value: T) => K} keySelector
 * @param {(value: T) => V} valueTransform
 * @returns {Map<K, T | V>}
 */
function associateBy(keySelector, valueTransform) {
    var result = new Map();
    var transform = valueTransform != null
        ? valueTransform
        : function (value) { return value; };
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        var key = keySelector(item);
        var value = transform(item);
        result.set(key, value);
    }
    return result;
}
exports.default = associateBy;


/***/ }),
/* 37 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Groups all elements of the sequence into a map. Keys are determined by the given `keySelector` function.
 *
 * @param {(value: T) => K} keySelector
 * @returns {Map<K, Array<T>>}
 */
function groupBy(keySelector) {
    var result = new Map();
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        var key = keySelector(item);
        var array = result.get(key);
        if (array == null) {
            result.set(key, [item]);
        }
        else {
            array.push(item);
        }
    }
    return result;
}
exports.default = groupBy;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Reduces the whole sequence to a single value by invoking `operation` with each element
 * from left to right. For every invocation of the operation `acc` is the result of the last
 * invocation. For the first invocation of the operation `acc` is the first element of the
 * sequence.
 *
 * @param {(acc: S, value: T) => S} operation
 * @returns {S}
 */
function reduce(operation) {
    if (!this.iterator.hasNext()) {
        throw new Error("Cannot reduce empty sequence");
    }
    var result = this.iterator.next();
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        result = operation(result, item);
    }
    return result;
}
exports.default = reduce;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Reduces the whole sequence to a single value by invoking `operation` with each element
 * from left to right. For every invocation of the operation `acc` is the result of the last
 * invocation. For the first invocation of the operation `acc` is the first element of the
 * sequence. In addition the `index` of the current element is also passed to the operation.
 *
 * @param {(index: number, acc: S, element: T) => S} operation
 * @returns {S}
 */
function reduceIndexed(operation) {
    if (!this.iterator.hasNext()) {
        throw new Error("Cannot reduce empty sequence");
    }
    var index = 1;
    var result = this.iterator.next();
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        result = operation(index, result, item);
        index++;
    }
    return result;
}
exports.default = reduceIndexed;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Accumulates all elements of the sequence into a single result by applying the given `operation` starting with
 * the `initial` value. The result of the last operation will be passed as accumulated value to the next invocation
 * of the operation until all elements of the sequence are processed.
 *
 * @param {R} initial
 * @param {(acc: R, element: T) => R} operation
 * @returns {R}
 */
function fold(initial, operation) {
    var result = initial;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        result = operation(result, item);
    }
    return result;
}
exports.default = fold;


/***/ }),
/* 41 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Accumulates all elements of the sequence into a single result by applying the given `operation` starting with
 * the `initial` value. The result of the last operation will be passed as accumulated value to the next invocation
 * of the operation as well as the `index` of the current element (zero-based) until all elements of the sequence
 * are processed.
 *
 * @param {R} initial
 * @param {(index: number, acc: R, element: T) => R} operation
 * @returns {R}
 */
function foldIndexed(initial, operation) {
    var result = initial;
    var index = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        result = operation(index, result, item);
        index++;
    }
    return result;
}
exports.default = foldIndexed;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
/**
 * Returns a single flat sequence of all the items from all sequences or iterables.
 *
 * @returns {Sequence<T>}
 */
function flatten() {
    return this.flatMap(function (it) {
        if (it instanceof Sequence_1.default) {
            return it;
        }
        else {
            return Sequence_1.asSequence(it);
        }
    });
}
exports.default = flatten;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var SequenceIterator_1 = __webpack_require__(1);
/**
 * Returns a new sequence with all elements sorted ascending in natural order.
 *
 * @returns {Sequence<T>}
 */
function sorted() {
    var sorted = [];
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        sorted.push(item);
    }
    sorted.sort();
    return new Sequence_1.default(new SequenceIterator_1.IterableIterator(sorted));
}
exports.default = sorted;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var SequenceIterator_1 = __webpack_require__(1);
/**
 * Returns a new sequence with all elements sorted ascending by the value specified
 * by the given `selector` function.
 *
 * @param {(value: T) => R} selector
 * @returns {Sequence<T>}
 */
function sortedBy(selector) {
    var sorted = [];
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        sorted.push(item);
    }
    sorted.sort(function (item1, item2) {
        var key1 = selector(item1);
        var key2 = selector(item2);
        if (key1 < key2) {
            return -1;
        }
        if (key1 > key2) {
            return 1;
        }
        return 0;
    });
    return new Sequence_1.default(new SequenceIterator_1.IterableIterator(sorted));
}
exports.default = sortedBy;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var SequenceIterator_1 = __webpack_require__(1);
/**
 * Returns a new sequence with all elements sorted descending in natural order.
 *
 * @returns {Sequence<T>}
 */
function sortedDescending() {
    var sorted = [];
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        sorted.push(item);
    }
    sorted.sort(function (item1, item2) {
        if (item1 < item2) {
            return 1;
        }
        if (item1 > item2) {
            return -1;
        }
        return 0;
    });
    return new Sequence_1.default(new SequenceIterator_1.IterableIterator(sorted));
}
exports.default = sortedDescending;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var SequenceIterator_1 = __webpack_require__(1);
/**
 * Returns a new sequence with all elements sorted descending by the value specified
 * by the given `selector` function.
 *
 * @param {(value: T) => R} selector
 * @returns {Sequence<T>}
 */
function sortedByDescending(selector) {
    var sorted = [];
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        sorted.push(item);
    }
    sorted.sort(function (item1, item2) {
        var key1 = selector(item1);
        var key2 = selector(item2);
        if (key1 < key2) {
            return 1;
        }
        if (key1 > key2) {
            return -1;
        }
        return 0;
    });
    return new Sequence_1.default(new SequenceIterator_1.IterableIterator(sorted));
}
exports.default = sortedByDescending;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var SequenceIterator_1 = __webpack_require__(1);
/**
 * Returns a new sequence with all elements sorted be the given `compare` function.
 *
 * @param {(a: T, b: T) => number} compare
 * @returns {Sequence<T>}
 */
function sortedWith(compare) {
    var sorted = [];
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        sorted.push(item);
    }
    sorted.sort(compare);
    return new Sequence_1.default(new SequenceIterator_1.IterableIterator(sorted));
}
exports.default = sortedWith;


/***/ }),
/* 48 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a new sequence consisting of all non-null elements.
 *
 * @returns {Sequence<T>}
 */
function filterNotNull() {
    return this.filter(function (it) { return it !== null; });
}
exports.default = filterNotNull;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
/**
 * Transforms each element into another value by applying the given `transform` function and returns a new sequence.
 * Transformations into `null` values are discarded.
 *
 * @param {(value: T) => R} transform
 * @returns {Sequence<R>}
 */
function mapNotNull(transform) {
    return this.flatMap(function (value) {
        var item = transform(value);
        return item !== null
            ? Sequence_1.sequenceOf(item)
            : Sequence_1.emptySequence();
    });
}
exports.default = mapNotNull;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var SequenceIterator_1 = __webpack_require__(1);
var AppendIterator = /** @class */ (function () {
    function AppendIterator(first, second) {
        this.first = first;
        this.second = second;
    }
    AppendIterator.prototype.hasNext = function () {
        return this.first.hasNext() || this.second.hasNext();
    };
    AppendIterator.prototype.next = function () {
        return this.first.hasNext()
            ? this.first.next()
            : this.second.next();
    };
    return AppendIterator;
}());
/**
 * Appends the given `data` to the end of the sequence and returns a new sequence. Data can either be a single element,
 * an array of elements or a sequence of elements.
 *
 * @param {Sequence<T> | Array<T> | T} data
 * @returns {Sequence<T>}
 */
function plus(data) {
    if (data instanceof Sequence_1.default) {
        return new Sequence_1.default(new AppendIterator(this.iterator, data.iterator));
    }
    else if (data instanceof Array) {
        return new Sequence_1.default(new AppendIterator(this.iterator, new SequenceIterator_1.IterableIterator(data)));
    }
    else {
        return new Sequence_1.default(new AppendIterator(this.iterator, new SequenceIterator_1.IterableIterator([data])));
    }
}
exports.default = plus;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
/**
 * Removes the given `data` and returns a new sequence. Data can either be a single element, an array of elements
 * or a sequence of elements.
 *
 * @param {Sequence<T> | Array<T> | T} data
 * @returns {Sequence<T>}
 */
function minus(data) {
    if (data instanceof Sequence_1.default) {
        var array_1 = data.toArray();
        return this.filter(function (it) { return array_1.indexOf(it) < 0; });
    }
    else if (data instanceof Array) {
        return this.filter(function (it) { return data.indexOf(it) < 0; });
    }
    else {
        return this.filter(function (it) { return it !== data; });
    }
}
exports.default = minus;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Sequence_1 = __webpack_require__(0);
var ZipIterator = /** @class */ (function () {
    function ZipIterator(iterator1, iterator2) {
        this.iterator1 = iterator1;
        this.iterator2 = iterator2;
    }
    ZipIterator.prototype.hasNext = function () {
        return this.iterator1.hasNext() && this.iterator2.hasNext();
    };
    ZipIterator.prototype.next = function () {
        var item1 = this.iterator1.next();
        var item2 = this.iterator2.next();
        return [item1, item2];
    };
    return ZipIterator;
}());
/**
 * Returns a new sequence consisting of pairs built the elements of both sequences
 * with the same index. The resulting sequence has the length of the shortest input
 * sequence. All other elements are discarded.
 *
 * @param {Sequence<S>} other
 * @returns {Sequence<[T , S]>}
 */
function zip(other) {
    return new Sequence_1.default(new ZipIterator(this.iterator, other.iterator));
}
exports.default = zip;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a pair of arrays where the first array contains all first values
 * and the second array all second values from each input pair of the sequence.
 *
 * @returns {[Array<T> , Array<S>]}
 */
function unzip() {
    var array1 = [];
    var array2 = [];
    while (this.iterator.hasNext()) {
        var _a = this.iterator.next(), first = _a[0], second = _a[1];
        array1.push(first);
        array2.push(second);
    }
    return [array1, array2];
}
exports.default = unzip;


/***/ }),
/* 54 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Evaluates the given `predicate` for each element of the sequence and assorts each element into one of two lists
 * according to the result of the predicate. Returns both lists as an object.
 *
 * @param {(value: T) => boolean} predicate
 * @returns {{true: Array<T>; false: Array<T>}}
 */
function partition(predicate) {
    var arrayTrue = [];
    var arrayFalse = [];
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (predicate(item)) {
            arrayTrue.push(item);
        }
        else {
            arrayFalse.push(item);
        }
    }
    return { 'true': arrayTrue, 'false': arrayFalse };
}
exports.default = partition;


/***/ }),
/* 55 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns all elements of the sequence as set. If a `set` is passed
 * the elements are added to this set.
 *
 * @param {Set<T>} set
 * @returns {Set<T>}
 */
function toSet(set) {
    var result = set || new Set();
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        result.add(item);
    }
    return result;
}
exports.default = toSet;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a map consisting of each key-value pair. If a `map` is passed
 * the pairs are set on this map. Duplicate keys override each other.
 *
 * @param {Map<K, V>} map
 * @returns {Map<K, V>}
 */
function toMap(map) {
    var result = map || new Map();
    while (this.iterator.hasNext()) {
        var pair = this.iterator.next();
        var key = pair[0];
        var value = pair[1];
        result.set(key, value);
    }
    return result;
}
exports.default = toMap;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the sum of all numbers.
 *
 * @returns {number}
 */
function sum() {
    var result = 0;
    while (this.iterator.hasNext()) {
        result += this.iterator.next();
    }
    return result;
}
exports.default = sum;


/***/ }),
/* 58 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the sum of all numbers specified by the given `selector` function.
 *
 * @param {(value: T) => number} selector
 * @returns {number}
 */
function sumBy(selector) {
    var result = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        result += selector(item);
    }
    return result;
}
exports.default = sumBy;


/***/ }),
/* 59 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Splits the elements of the sequence into arrays which length is determined by
 * the given `chunkSize` and returns all chunks as array.
 *
 * @param {number} chunkSize
 * @returns {Array<Array<T>>}
 */
function chunk(chunkSize) {
    if (chunkSize < 1) {
        throw new Error("chunkSize must be > 0 but is " + chunkSize);
    }
    var result = [];
    var index = 0;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        var chunk_1 = Math.floor(index / chunkSize);
        if (result[chunk_1] == null) {
            result[chunk_1] = [item];
        }
        else {
            result[chunk_1].push(item);
        }
        index++;
    }
    return result;
}
exports.default = chunk;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a new sequence with all elements of the sequence in reverse order.
 *
 * @returns {Sequence<T>}
 */
function reverse() {
    return this.withIndex()
        .sortedByDescending(function (it) { return it.index; })
        .map(function (it) { return it.value; });
}
exports.default = reverse;


/***/ }),
/* 61 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the average of all numbers of the sequence or `NaN` if the sequence is empty.
 *
 * @returns {number}
 */
function average() {
    var sum = 0;
    var count = 0;
    while (this.iterator.hasNext()) {
        sum += this.iterator.next();
        count++;
    }
    return count === 0
        ? Number.NaN
        : sum / count;
}
exports.default = average;


/***/ }),
/* 62 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the maximum element of the sequence or `null` if sequence is empty.
 *
 * @returns {T}
 */
function max() {
    var max = null;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (max == null || item > max) {
            max = item;
        }
    }
    return max;
}
exports.default = max;


/***/ }),
/* 63 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the maximum element by comparing the results of the given `selector` function
 * for each element of the sequence or `null` if the sequence is empty.
 *
 * @param {(value: T) => R} selector
 * @returns {T}
 */
function maxBy(selector) {
    var max = null;
    var maxSelected = null;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        var value = selector(item);
        if (maxSelected == null || value > maxSelected) {
            maxSelected = value;
            max = item;
        }
    }
    return max;
}
exports.default = maxBy;


/***/ }),
/* 64 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the minimum element of the sequence or `null` if sequence is empty.
 *
 * @returns {T}
 */
function min() {
    var min = null;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (min == null || item < min) {
            min = item;
        }
    }
    return min;
}
exports.default = min;


/***/ }),
/* 65 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the minimum element by comparing the results of the given `selector` function
 * for each element of the sequence or `null` if the sequence is empty.
 *
 * @param {(value: T) => R} selector
 * @returns {T}
 */
function minBy(selector) {
    var min = null;
    var minSelected = null;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        var value = selector(item);
        if (minSelected == null || value < minSelected) {
            minSelected = value;
            min = item;
        }
    }
    return min;
}
exports.default = minBy;


/***/ }),
/* 66 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the maximum element of the sequence by evaluating the given `compare`
 * function or `null` if sequence is empty.
 *
 * @returns {T}
 */
function maxWith(compare) {
    var max = null;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (max == null || compare(item, max) > 0) {
            max = item;
        }
    }
    return max;
}
exports.default = maxWith;


/***/ }),
/* 67 */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the minimum element of the sequence by evaluating the given `compare`
 * function or `null` if sequence is empty.
 *
 * @returns {T}
 */
function minWith(compare) {
    var min = null;
    while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (min == null || compare(item, min) < 0) {
            min = item;
        }
    }
    return min;
}
exports.default = minWith;


/***/ })
/******/ ]);
});
//# sourceMappingURL=sequency.js.map